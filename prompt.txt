Threat name
attack domain
Threat description
capec Reference
countermeasure
mitre_tactic_id
mitre_tactic_description
mitre_technique_id
mitre_technique_description
severity
likelihood
programming_threat_vectors
social_engineering_threat_vectors
l4_control
capec_id
cwe_id
threat_vector
component_name
component_type
Domain




template = """ <s>[INST] <<SYS>>
            As a cyber security expert, your task is to prepare a list of {number_of_threat} threats.It is very important that your responses are tailored to reflect the details you are given.
            <</SYS>>
            
            Provide Threat Names, Attack Domains, Threat Descriptions, Countermeasures, CAPEC Reference URLs, and References for the {component_name} component, version {component_version}.

            To structure your data, follow these guidelines:

            1. Threat Name: A descriptive name for each potential threat (e.g., Data Manipulation).
            2. Attack Domain: Specify the category of attack, such as network or application.
            3. Threat Description: Offer a concise explanation of the potential attack. For example, describe how attackers can manipulate data in MongoDB due to improper access controls or vulnerabilities in the application using the database.
            4. Countermeasure: Suggest recommendations to mitigate each threat.
            5. MITRE Tactics ID: Specify MITRE Tactics ID from the MITRE Website.
            5. MITRE Tactics Description: Specify MITRE Tactics Description from the MITRE Website.
            6. MITRE Techniques ID: Specify MITRE Techniques ID from the MITRE Website.
            6. MITRE Techniques Description: Specify MITRE Techniques Description from the MITRE Website.
            5. CAPEC Reference URL: Include the URL of the CAPEC (Common Attack Pattern Enumeration and Classification) database for each threat, linking to its CAPEC page.
            6. References: Provide reference source names or URLs to verify the accuracy of the threat information provided.
                        
            Note:- Your output should be in the pandas dataframe table format with the following given above columns. [/INST]
            """

Act as a cyber security expert with more than 30 years experience of threat library development for given ngnix 1.23 version, your task is to prepare a list of 5 threats.It is very important that your responses are tailored to reflect the details you are given.

Threat Name: A descriptive name for each potential threat (e.g., Data Manipulation).
Threat Description: Offers a concise explanation of the potential attack. For example, describe how attackers can manipulate data in a given component due to improper access controls or vulnerabilities in the application using the database.
Attack Domain: Specifies the category of attack, such as network or application.
Countermeasure: Suggests recommendations to mitigate each threat.
NIST Reference: Provides relevant information or recommendations from the National Institute of Standards and Technology (NIST).
ASVS Reference: Reference to the OWASP Application Security Verification Standard (ASVS).
OWASP Reference: Reference to the Open Web Application Security Project (OWASP).
SANS Reference: Reference to the SANS Institute, a leading organization in cybersecurity education and training.
CIS Reference: Reference to the Center for Internet Security (CIS), a nonprofit organization that provides cybersecurity resources and best practices.
MITRE Tactics ID: Specifies the corresponding MITRE Tactics ID URL from the MITRE ATT&CK速 framework (e.g., https://attack.mitre.org/tactics/TA0043/).
MITRE Tactics Description: Provides a brief description of the MITRE Tactics ID from the MITRE ATT&CK速 framework.
MITRE Techniques ID: Specifies the relevant MITRE Techniques ID URL from the MITRE ATT&CK速 framework (e.g., https://attack.mitre.org/techniques/T1548/).
MITRE Techniques Description: Offers a concise explanation of the MITRE Techniques ID from the MITRE ATT&CK速 framework.
CAPEC Reference URL: Includes the URL of the Common Attack Pattern Enumeration and Classification (CAPEC) database entry for each threat, linking to its CAPEC page (e.g., https://capec.mitre.org/data/definitions/1000.html).


docker run -d -p 3000:8080 --add-host=host.docker.internal:host-gateway -v open-webui:/app/backend/data --name open-webui --restart always ghcr.io/open-webui/open-webui:main

Stride GPT example

A web application that allows users to create, store, and share personal notes. 
The application is built using the React frontend framework and a Node.js backend with a MongoDB database. Users can sign up for an account and log in using OAuth2 with Google or Facebook. The notes are encrypted at rest and are only accessible by the user who created them. The application also supports real-time collaboration on notes with other users.

These challenges are what I'm currently facing. If you have any insights or suggestions on how to address them, please feel free to share your thoughts.


Function Calling: Currently, we're facing a challenge with Llama 2 as it does not support dynamic function calling based on user input. Unlike Llama 2, OpenAI offers this functionality. For more information, you can refer to the following GitHub issue: [https://github.com/meta-llama/llama/issues/463]. In an effort to overcome this limitation, I'm exploring an alternative LLM model known as functionary-7b, which is tailored specifically for function calling scenarios. Unfortunately, I encountered an obstacle yesterday when attempting to install it; due to space constraints, I was unable to download the model.

Function Parameter Extraction: Prior to invoking a function, it's essential to extract the necessary parameters from user input. For instance, when generating an MSBR report for the scpay app, we must extract the application name from the prompt. While this capability is supported by the OpenAI Model, I encountered an issue with Llama 2, where it automatically fills in missing information, which is not desired behavior for our use case.

Combining RAG with Function Calling: We aim to integrate the Langchain RAG method with function calling options. This involves dynamically calling functions or retrieving information from the knowledge base.

Follow-up Questions from Bot (YES/NO): We are considering implementing a feature that prompts the user for confirmation before generating an MSBR report. Currently, we are providing answers solely based on user questions.

Parallel LLM Calls: Although we have set up Databricks to make parallel calls, we are facing challenges integrating it with the Langchain framework.

RBAC (Role-Based Access Control): Users should be able to generate MSBR reports for any application and access information about other apps by asking questions.
